{"ast":null,"code":"const handleSend = async () => {\n  if (!content.trim()) {\n    alert('Message cannot be empty');\n    return;\n  }\n  setIsSending(true);\n  try {\n    // Ensure we're using the correct model names that match your backend\n    const response = await axios.post('http://localhost:5000/api/messages', {\n      senderId: user._id,\n      receiverId,\n      senderModel: 'User',\n      // Always use 'User' since you don't have separate Worker model\n      receiverModel: 'User',\n      // Same here\n      content\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    if (response.status === 201) {\n      alert('Message sent successfully!');\n      setContent('');\n      onClose();\n    }\n  } catch (err) {\n    var _err$response, _err$response2, _err$response2$data;\n    console.error('Failed to send message:', {\n      error: ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message,\n      config: err.config\n    });\n    alert(`Error: ${((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || 'Failed to send message'}`);\n  } finally {\n    setIsSending(false);\n  }\n};","map":{"version":3,"names":["handleSend","content","trim","alert","setIsSending","response","axios","post","senderId","user","_id","receiverId","senderModel","receiverModel","headers","Authorization","localStorage","getItem","status","setContent","onClose","err","_err$response","_err$response2","_err$response2$data","console","error","data","message","config"],"sources":["C:/Users/akash/OneDrive/Desktop/practicemern/mern-auth-project/client/src/components/Message.js"],"sourcesContent":["const handleSend = async () => {\r\n  if (!content.trim()) {\r\n    alert('Message cannot be empty');\r\n    return;\r\n  }\r\n\r\n  setIsSending(true);\r\n  try {\r\n    // Ensure we're using the correct model names that match your backend\r\n    const response = await axios.post('http://localhost:5000/api/messages', {\r\n      senderId: user._id,\r\n      receiverId,\r\n      senderModel: 'User', // Always use 'User' since you don't have separate Worker model\r\n      receiverModel: 'User', // Same here\r\n      content\r\n    }, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${localStorage.getItem('token')}`\r\n      }\r\n    });\r\n\r\n    if (response.status === 201) {\r\n      alert('Message sent successfully!');\r\n      setContent('');\r\n      onClose();\r\n    }\r\n  } catch (err) {\r\n    console.error('Failed to send message:', {\r\n      error: err.response?.data || err.message,\r\n      config: err.config,\r\n    });\r\n    alert(`Error: ${err.response?.data?.error || 'Failed to send message'}`);\r\n  } finally {\r\n    setIsSending(false);\r\n  }\r\n}; "],"mappings":"AAAA,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,CAAC,EAAE;IACnBC,KAAK,CAAC,yBAAyB,CAAC;IAChC;EACF;EAEAC,YAAY,CAAC,IAAI,CAAC;EAClB,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,oCAAoC,EAAE;MACtEC,QAAQ,EAAEC,IAAI,CAACC,GAAG;MAClBC,UAAU;MACVC,WAAW,EAAE,MAAM;MAAE;MACrBC,aAAa,EAAE,MAAM;MAAE;MACvBZ;IACF,CAAC,EAAE;MACDa,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MACxD;IACF,CAAC,CAAC;IAEF,IAAIZ,QAAQ,CAACa,MAAM,KAAK,GAAG,EAAE;MAC3Bf,KAAK,CAAC,4BAA4B,CAAC;MACnCgB,UAAU,CAAC,EAAE,CAAC;MACdC,OAAO,CAAC,CAAC;IACX;EACF,CAAC,CAAC,OAAOC,GAAG,EAAE;IAAA,IAAAC,aAAA,EAAAC,cAAA,EAAAC,mBAAA;IACZC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAE;MACvCA,KAAK,EAAE,EAAAJ,aAAA,GAAAD,GAAG,CAAChB,QAAQ,cAAAiB,aAAA,uBAAZA,aAAA,CAAcK,IAAI,KAAIN,GAAG,CAACO,OAAO;MACxCC,MAAM,EAAER,GAAG,CAACQ;IACd,CAAC,CAAC;IACF1B,KAAK,CAAC,UAAU,EAAAoB,cAAA,GAAAF,GAAG,CAAChB,QAAQ,cAAAkB,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcI,IAAI,cAAAH,mBAAA,uBAAlBA,mBAAA,CAAoBE,KAAK,KAAI,wBAAwB,EAAE,CAAC;EAC1E,CAAC,SAAS;IACRtB,YAAY,CAAC,KAAK,CAAC;EACrB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}