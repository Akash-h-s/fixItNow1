{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\akash\\\\OneDrive\\\\Desktop\\\\practicemern\\\\mern-auth-project\\\\client\\\\src\\\\components\\\\Message.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Message = ({\n  selectedWorker\n}) => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  useEffect(() => {\n    const loggedInUser = JSON.parse(localStorage.getItem('user'));\n    if (loggedInUser) {\n      setUserEmail(loggedInUser.email); // assuming your user object has email\n    }\n  }, []);\n  const sendMessage = async () => {\n    if (!userEmail || !(selectedWorker !== null && selectedWorker !== void 0 && selectedWorker.email) || !message) {\n      alert('Sender, receiver, or message is missing');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/api/messages/send', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          sender: userEmail,\n          receiver: selectedWorker.email,\n          content: message\n        })\n      });\n      const result = await response.json();\n      if (response.ok) {\n        alert('Message sent successfully');\n        setMessage('');\n      } else {\n        alert(result.error || 'Message send failed');\n      }\n    } catch (err) {\n      console.error(err);\n      alert('An error occurred');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      placeholder: \"Type your message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(Message, \"fxqNdzAMv7NeZHD0WiSpdNB+4RA=\");\n_c = Message;\nexport default Message;\nvar _c;\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"names":["Message","selectedWorker","_s","message","setMessage","useState","userEmail","setUserEmail","useEffect","loggedInUser","JSON","parse","localStorage","getItem","email","sendMessage","alert","response","fetch","method","headers","body","stringify","sender","receiver","content","result","json","ok","error","err","console","_jsxDEV","children","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/akash/OneDrive/Desktop/practicemern/mern-auth-project/client/src/components/Message.js"],"sourcesContent":["const Message = ({ selectedWorker }) => {\r\n  const [message, setMessage] = useState('');\r\n  const [userEmail, setUserEmail] = useState('');\r\n\r\n  useEffect(() => {\r\n    const loggedInUser = JSON.parse(localStorage.getItem('user'));\r\n    if (loggedInUser) {\r\n      setUserEmail(loggedInUser.email); // assuming your user object has email\r\n    }\r\n  }, []);\r\n\r\n  const sendMessage = async () => {\r\n    if (!userEmail || !selectedWorker?.email || !message) {\r\n      alert('Sender, receiver, or message is missing');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/messages/send', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          sender: userEmail,\r\n          receiver: selectedWorker.email,\r\n          content: message,\r\n        }),\r\n      });\r\n\r\n      const result = await response.json();\r\n      if (response.ok) {\r\n        alert('Message sent successfully');\r\n        setMessage('');\r\n      } else {\r\n        alert(result.error || 'Message send failed');\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert('An error occurred');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <textarea\r\n        value={message}\r\n        onChange={(e) => setMessage(e.target.value)}\r\n        placeholder=\"Type your message...\"\r\n      />\r\n      <button onClick={sendMessage}>Send</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n"],"mappings":";;;AAAA,MAAMA,OAAO,GAAGA,CAAC;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGF,QAAQ,CAAC,EAAE,CAAC;EAE9CG,SAAS,CAAC,MAAM;IACd,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC7D,IAAIJ,YAAY,EAAE;MAChBF,YAAY,CAACE,YAAY,CAACK,KAAK,CAAC,CAAC,CAAC;IACpC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAACT,SAAS,IAAI,EAACL,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEa,KAAK,KAAI,CAACX,OAAO,EAAE;MACpDa,KAAK,CAAC,yCAAyC,CAAC;MAChD;IACF;IAEA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;QACtEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEX,IAAI,CAACY,SAAS,CAAC;UACnBC,MAAM,EAAEjB,SAAS;UACjBkB,QAAQ,EAAEvB,cAAc,CAACa,KAAK;UAC9BW,OAAO,EAAEtB;QACX,CAAC;MACH,CAAC,CAAC;MAEF,MAAMuB,MAAM,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACpC,IAAIV,QAAQ,CAACW,EAAE,EAAE;QACfZ,KAAK,CAAC,2BAA2B,CAAC;QAClCZ,UAAU,CAAC,EAAE,CAAC;MAChB,CAAC,MAAM;QACLY,KAAK,CAACU,MAAM,CAACG,KAAK,IAAI,qBAAqB,CAAC;MAC9C;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACF,KAAK,CAACC,GAAG,CAAC;MAClBd,KAAK,CAAC,mBAAmB,CAAC;IAC5B;EACF,CAAC;EAED,oBACEgB,OAAA;IAAAC,QAAA,gBACED,OAAA;MACEE,KAAK,EAAE/B,OAAQ;MACfgC,QAAQ,EAAGC,CAAC,IAAKhC,UAAU,CAACgC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC5CI,WAAW,EAAC;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eACFV,OAAA;MAAQW,OAAO,EAAE5B,WAAY;MAAAkB,QAAA,EAAC;IAAI;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEV,CAAC;AAACxC,EAAA,CAnDIF,OAAO;AAAA4C,EAAA,GAAP5C,OAAO;AAqDb,eAAeA,OAAO;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}